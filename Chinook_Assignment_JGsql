
--2 	SQL Queries
--In this section you will be performing various queries against the Oracle Chinook database.
--2.1 SELECT
--Task – Select all records from the Employee table.
SELECT * FROM EMPLOYEE;

--Task – Select all records from the Employee table where last name is King.
SELECT * FROM EMPLOYEE
WHERE LASTNAME= 'King';

--Task – Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
SELECT * FROM EMPLOYEE
WHERE FIRSTNAME= 'Andrew' AND REPORTSTO IS NULL;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--2.2 ORDER BY
--Task – Select all albums in Album table and sort result set in descending order by title.
SELECT * FROM ALBUM ORDER BY TITLE DESC;

--Task – Select first name from Customer and sort result set in ascending order by city
SELECT * FROM CUSTOMER
ORDER BY CITY,
        FIRSTNAME;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--2.3 INSERT INTO
--Task – Insert two new records into Genre table 
INSERT INTO GENRE VALUES (26, 'SWING');
INSERT INTO GENRE VALUES (27, 'BALLROOM');
COMMIT;  --commit...  my dang changes...  or else  we revisit this -_-

SELECT * FROM GENRE; --my verifying these changes

--Task – Insert two new records into Employee table
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) 
VALUES (99, 'NinetyNine', 'Agent', 'Your Majesty', TO_DATE('1902-5-12 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('1956-9-07 00:00:00','yyyy-mm-dd hh24:mi:ss'), '22 Steeples Hill', 'Edmonton', 'AB', 'Canada', 'T5K 2N1', '+1 (780) 428-9482', '+1 (780) 428-3457', 'sshhh@chinookcorp.com');
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email)
VALUES (100, 'Law', 'Sue', 'Judge and Jury', 99, TO_DATE('2009-5-8 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2015-9-07 00:00:00','yyyy-mm-dd hh24:mi:ss'), '59 Armageddon Street', 'Calgary', 'AB', 'Canada', 'T2P 2T3', '+1 (403) 262-3443', '+1 (403) 262-3322', 'lastrites@chinookcorp.com');
COMMIT;

SELECT * FROM EMPLOYEE;

--Task – Insert two new records into Customer table
INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) 
VALUES (69, 'Louie', 'King', 'Embraer ', 'Av. Brigadeiro Faria Lima, 2170', 'São José dos Campos', 'SP', 'Brazil', '12227-000', '+55 (12) 3923-5555', '+55 (12) 3923-5566', 'daman@embraer.com.br', 3);
INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, Country, PostalCode, Phone, Email, SupportRepId) 
VALUES (96, 'Elvis', 'King', 'Unicorns Arise Shh Avenue', 'Stuttgart', 'Germany', '70174', '+49 0711 2842222', 'charlie@surfeu.de', 5);
COMMIT;


SELECT * FROM CUSTOMER;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--2.4 UPDATE
--Task – Update Aaron Mitchell in Customer table to Robert Walter
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE (FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell');
COMMIT;

SELECT * FROM CUSTOMER;

--Task – Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”	
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';
COMMIT;

SELECT * FROM ARTIST
ORDER BY NAME;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--2.5 LIKE
--Task – Select all invoices with a billing address like “T%” 
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--2.6 BETWEEN
--Task – Select all invoices that have a total between 15 and 50
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

--Task – Select all employees hired between 1st of June 2003 and 1st of March 2004
SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN TO_DATE('2003-06-01 00:00:00','yyyy-mm-dd hh24:mi:ss')AND TO_DATE('2004-03-01 00:00:00','yyyy-mm-dd hh24:mi:ss');

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--2.7 DELETE
--Task – Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).
ALTER TABLE INVOICE
    DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE INVOICE
    ADD CONSTRAINT FK_INVOICECUSTOMERID
    FOREIGN KEY (CUSTOMERID)
    REFERENCES CUSTOMER (CUSTOMERID)
    ON DELETE CASCADE;

ALTER TABLE INVOICELINE
    DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE INVOICELINE
    ADD CONSTRAINT FK_INVOICELINEINVOICEID
    FOREIGN KEY (INVOICEID)
    REFERENCES INVOICE (INVOICEID)
    ON DELETE CASCADE;

DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
commit;

-- this...was far too dramatic and epic... a problem O.O


SELECT * FROM customer

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--SQL Functions
--In this section you will be using the Oracle system functions, as well as your own functions, to perform various actions against the database
--3.1 System Defined Functions
--Task – Create a function that returns the current time.

ALTER SESSION SET NLS_DATE_FORMAT = 'dd/mom/yyyy hh24:mi:ss' FROM DUAL
/

SELECT CURRENT_DATE FROM DUAL -- returns date AND TIME OF THE USER...MINUS CAPSLOCK
/
SELECT DISTINCT SYSDATE FROM DUAL -- sysdate returns the date and time of the server, 
                                    --which may be different from the user if the user is 
                                    --on a different machine with different set up, or different
                                    --timezone...is my understanding... but also, I thought both functions
                                    --results would appear in my results; even if same afterall.. but I guess only one
                                    --will show, since they're same, and sydate trumps current_date? //\\
/

--Task – create a function that returns the length of name in MEDIATYPE table
SELECT LENGTH(NAME) AS LENGTHOFNAME
FROM MEDIATYPE
WHERE MEDIATYPEID = 1; 

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--3.2 System Defined Aggregate Functions
--Task – Create a function that returns the average total of all invoices 
SELECT AVG(ALL TOTAL)
FROM INVOICE;

--Task – Create a function that returns the most expensive track

SELECT MAX(UNITPRICE) 

AS "MOST EXPENSIVE TRACK"

FROM TRACK;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--3.3 User Defined Scalar Functions
--Task – Create a function that returns the average price of invoice line items in the invoiceline table

SELECT AVG(ALL UNITPRICE)
FROM INVOICELINE;


--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--3.4 User Defined Table Valued Functions
--Task – Create a function that returns all employees who are born after 1968.

SELECT * FROM EMPLOYEE
WHERE BIRTHDATE>= DATE '1969-01-01';

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--4.0 Stored Procedures
 --In this section you will be creating and executing stored procedures. You will be creating various types of stored procedures that take input and output parameters.

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--4.1 Basic Stored Procedure
--Task – Create a stored procedure that selects the first and last names of all the employees.

 
 CREATE OR REPLACE PROCEDURE EMPLOYEE_FIRSTLASTNAME
 (FIRSTNAME OUT VARCHAR2, LASTNAME OUT VARCHAR2)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME 
    INTO FIRSTNAME, LASTNAME 
    FROM EMPLOYEE;
    
    END;
    
    
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--4.2 Stored Procedure Input Parameters
--Task – Create a stored procedure that updates the personal information of an employee.
SELECT * FROM EMPLOYEE;
CREATE OR REPLACE PROCEDURE EMPLOYEE_UPDATEPERSONALINFO
(
FIRSTNAME2 IN  VARCHAR2,
LASTNAME2 IN VARCHAR2,
BIRTHDATE2 IN DATE,
EMPLOYEEID2 IN NUMBER
)
AS
BEGIN
    
    UPDATE EMPLOYEE
    SET
    FIRSTNAME = FIRSTNAME2,
    LASTNAME = LASTNAME2,
    BIRTHDATE = BIRTHDATE2
    WHERE
    EMPLOYEEID = EMPLOYEEID2;
    
    END; 
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--Task – Create a stored procedure that returns the managers of an employee.

SELECT * FROM EMPLOYEE;

CREATE OR REPLACE PROCEDURE EMPLOYEE_REPORTSTO
(
EMPLOYEE_ID IN NUMBER,
MANAGERID OUT NUMBER
)
AS
BEGIN
    SELECT REPORTSTO
    INTO MANAGERID
    FROM
    EMPLOYEE
    WHERE EMPLOYEE_ID = EMPLOYEEID;
    END;
    
   
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--4.3 Stored Procedure Output Parameters
--Task – Create a stored procedure that returns the name and company of a customer.

*SELECT * FROM CUSTOMER;

CREATE OR REPLACE PROCEDURE CUSTOMER_NAMEANDCOMPANY
(
CUSTOMERID2 IN NUMBER,
FIRSTNAME2 OUT VARCHAR2,
LASTNAME2 OUT VARCHAR2,
COMPANY2 OUT VARCHAR2
)
AS
BEGIN
    
    SELECT FIRSTNAME, LASTNAME, COMPANY
    INTO FIRSTNAME2, LASTNAME2, COMPANY2
    FROM
    CUSTOMER
    WHERE CUSTOMERID = CUSTOMERID2;
    
    END;
    /
     
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--5.0 Transactions
--In this section you will be working with transactions. Transactions are usually nested within a stored procedure.
--Task – Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).
 
 CREATE OR REPLACE PROCEDURE DELETE_INVOICE_GIVEN_INVOICEID
 
 (INVOICEID2 IN NUMBER)
 
 AS
 BEGIN
 DELETE
 
 FROM INVOICE
 WHERE INVOICEID = INVOICEID2;
 COMMIT;
 END;
 

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--6.0 Triggers
--In this section you will create various kinds of triggers that work when certain DML statements are executed on a table.

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--6.1 AFTER/FOR
--Task - Create an after insert trigger on the employee table fired after a new record is inserted into the table.

CREATE OR REPLACE TRIGGER  AFTER_INSERT_TRIGGER AFTER INSERT ON EMPLOYEE

FOR EACH ROW  
BEGIN 
UPDATE CUSTOMER
SET FIRSTNAME = 'Adam', LASTNAME = 'Smithy'
WHERE (FIRSTNAME = 'Margaret' AND LASTNAME = 'Park');
END;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--Task – Create an after update trigger on the album table that fires after a row is inserted in the table

CREATE OR REPLACE TRIGGER AFTER_UPDATE_TRIGGER AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
UPDATE ARTIST
SET NAME = 'Whitney Houston'
WHERE NAME = 'Aerosmith';
END;


--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Task – Create an after delete trigger on the customer table that fires after a row is deleted from the table.

CREATE OR REPLACE TRIGGER AFTER_DELETE_TRIGGER AFTER DELETE ON CUSTOMER

FOR EACH ROW  
BEGIN 
DBMS_OUTPUT.PUT_LINE('customer row deleted...WAW');
END;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--7.0 JOINS
--In this section you will be working with combining various tables through the use of joins. You will work with outer, inner, right, left, cross, and self joins.

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--7.1 INNER
--Task – Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.

SELECT  CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
   FROM CUSTOMER
   INNER JOIN INVOICE
   ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--7.2 OUTER
--Task – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.


SELECT  CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
   FROM CUSTOMER
   FULL OUTER JOIN INVOICE
   ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--7.3 RIGHT
--Task – Create a right join that joins album and artist specifying artist name and title.

SELECT  ARTIST."NAME", ALBUM.TITLE
   FROM ALBUM
   RIGHT OUTER JOIN ARTIST
   ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


--7.4 CROSS
--Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.

SELECT  ARTIST."NAME"
   FROM ALBUM
   CROSS JOIN ARTIST
   ORDER BY ARTIST."NAME";

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


7.5 SELF
Task – Perform a self-join on the employee table, joining on the reportsto column.

SELECT  *
   FROM EMPLOYEE A, EMPLOYEE B
   WHERE A.REPORTSTO = B.REPORTSTO;
